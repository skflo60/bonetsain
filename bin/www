#!/usr/bin/env node

var app = require('../app');
var debug = require('debug');
var http = require('http');
const cors = require('cors');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

const cors = require('cors');
const whitelist = ['http://localhost:8080', 'https://herokuapp.com'];
const corsOptions = {
  credentials: true, // This is important.
  origin: (origin, callback) => {
    if(whitelist.includes(origin))
      return callback(null, true)

      callback(new Error('Not allowed by CORS'));
  }
}

app.use(cors(corsOptions));

// Chargement de socket.io
var io = require('socket.io').listen(server);
io.origins('https://herokuapp.com') // for latest version
io.set('origins', 'https://herokuapp.com');

var allowedOrigins = "herokuapp.com:*";
 io(server,{origins:allowedOrigins});
// Quand un client se connecte, on le note dans la console
io.sockets.on('connection', function (socket) {
    console.log('Un client est connectÃ© !');
});


io.on('connect', (socket) => {
    var sock = socket
    sock.on('updateCoords', (data) => {
      console.log("Receiving new coords ! ", data)
      io.emit('newCoords', data);
    })
})

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log(`Server listening on port ${port}`);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
